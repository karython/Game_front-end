
let faseAtual = 1;
const totalFases = 20;

const fases = [
     {
        titulo: "Fase 1: O Despertar Digital",
        historia: "Voc√™ √© um Desenvolvedor C√≥smico que acabou de chegar ao Planeta HTML-5. A civiliza√ß√£o local perdeu toda sua estrutura digital ap√≥s uma tempestade c√≥smica. Sua primeira miss√£o √© recriar a estrutura b√°sica de uma p√°gina web para restaurar a comunica√ß√£o planet√°ria.",
        desafio: "üéØ Desafio: Crie uma estrutura HTML b√°sica com t√≠tulo h1 'Bem-vindos ao Planeta HTML-5' e um par√°grafo explicando sua miss√£o como desenvolvedor c√≥smico.",
        solucaoEsperada: ["h1", "Bem-vindos ao Planeta HTML-5", "p"],
        dica: "Lembre-se que todo texto precisa estar dentro de tags apropriadas. Para t√≠tulos principais, use a tag de cabe√ßalho de n√≠vel 1, e para textos descritivos, use a tag de par√°grafo."
    },
    {
        titulo: "Fase 2: Os Elementos Perdidos",
        historia: "Excelente trabalho! Agora os habitantes do planeta conseguem se comunicar novamente. Por√©m, eles precisam de uma lista de suprimentos essenciais para reconstruir sua sociedade digital. Voc√™ deve criar uma lista organizada.",
        desafio: "üéØ Desafio: Crie uma lista n√£o ordenada (ul) com pelo menos 3 itens de suprimentos digitais (como 'Processadores Qu√¢nticos', 'Cabos de Fibra √ìptica', 'Telas Hologr√°ficas').",
        solucaoEsperada: ["ul", "li", "Processadores", "Cabos", "Telas"],
        dica: "Para criar listas em HTML, voc√™ precisa de um elemento contenedor principal e elementos filhos para cada item da lista. Pense numa lista de compras!"
    },
    {
        titulo: "Fase 3: O Portal das Conex√µes",
        historia: "Os suprimentos foram organizados! Agora voc√™ precisa criar portais de navega√ß√£o para conectar diferentes setores do planeta. Estes portais s√£o conhecidos como 'links' no mundo digital.",
        desafio: "üéØ Desafio: Crie 3 links usando a tag <a> com href='#' apontando para 'Setor Residencial', 'Setor Comercial' e 'Setor Industrial'.",
        solucaoEsperada: ["a", "href", "Setor Residencial", "Setor Comercial", "Setor Industrial"],
        dica: "Os links em HTML precisam de um atributo que indica para onde apontar. Como s√£o portais fict√≠cios, use apenas o s√≠mbolo de hashtag como destino tempor√°rio."
    },
    {
        titulo: "Fase 4: A Galeria das Mem√≥rias",
        historia: "Os portais est√£o funcionando perfeitamente! Agora os habitantes querem preservar suas mem√≥rias atrav√©s de imagens hologr√°ficas. Voc√™ deve criar uma galeria para exibir essas preciosas lembran√ßas.",
        desafio: "üéØ Desafio: Adicione uma imagem usando <img> com src='https://via.placeholder.com/300x200/667eea/ffffff?text=Memoria+Cosmica' e um texto alternativo descritivo.",
        solucaoEsperada: ["img", "src", "placeholder", "alt"],
        dica: "Para exibir imagens, voc√™ precisa de uma tag especial que n√£o possui fechamento. Lembre-se sempre de incluir um texto alternativo para acessibilidade!"
    },
    {
        titulo: "Fase 5: O Primeiro Toque de Estilo",
        historia: "Incr√≠vel! As mem√≥rias est√£o sendo preservadas. Mas os habitantes acham que tudo est√° muito sem vida. Eles ouviram falar de uma antiga arte chamada 'CSS' que pode dar cor e vida aos elementos digitais.",
        desafio: "üéØ Desafio: Adicione uma tag <style> no head e crie uma regra CSS que mude a cor do h1 para azul (#007BFF) e o tamanho da fonte para 2em.",
        solucaoEsperada: ["style", "h1", "color", "#007BFF", "font-size", "2em"],
        dica: "O CSS deve ficar dentro de uma tag especial no cabe√ßalho da p√°gina. Para aplicar estilos, voc√™ seleciona o elemento e define suas propriedades como cor e tamanho da fonte."
    },
    {
        titulo: "Fase 6: O Centro do Universo",
        historia: "Fant√°stico! Agora h√° cor no planeta. Os habitantes querem que tudo fique bem organizado e centralizado, como o centro de comando de uma nave espacial. √â hora de aprender sobre alinhamento.",
        desafio: "üéØ Desafio: Centralize todo o conte√∫do da p√°gina usando CSS. Adicione text-align: center ao body.",
        solucaoEsperada: ["body", "text-align", "center"],
        dica: "Para alinhar todo o conte√∫do da p√°gina, voc√™ precisa aplicar um estilo ao elemento que cont√©m toda a p√°gina. Existe uma propriedade CSS espec√≠fica para alinhamento de texto."
    },
    {
        titulo: "Fase 7: A Caixa M√°gica",
        historia: "Perfeito! Tudo est√° centralizado como o n√∫cleo de uma estrela. Agora voc√™ descobriu um elemento misterioso chamado 'div' - uma caixa m√°gica que pode conter outros elementos e ser estilizada de formas incr√≠veis.",
        desafio: "üéØ Desafio: Crie uma div com classe 'container' e adicione CSS para dar uma largura de 80%, margem autom√°tica, padding de 20px e uma borda de 2px solid azul.",
        solucaoEsperada: ["div", "class", "container", "width", "80%", "margin", "auto", "padding", "20px", "border"],
        dica: "A div √© um cont√™iner vers√°til. Use classes para identific√°-la no CSS. Para centralizar um elemento com largura definida, use margem autom√°tica. N√£o esque√ßa do espa√ßamento interno e da borda!"
    },
    {
        titulo: "Fase 8: O Reino das Cores",
        historia: "Magn√≠fico! A caixa m√°gica est√° funcionando. Os habitantes querem explorar mais cores para tornar seu mundo mais vibrante. √â hora de descobrir o poder dos gradientes e backgrounds.",
        desafio: "üéØ Desafio: Adicione um background gradient linear do azul (#667eea) para o roxo (#764ba2) ao body.",
        solucaoEsperada: ["background", "linear-gradient", "#667eea", "#764ba2"],
        dica: "Para criar fundos com gradiente, use a propriedade background com uma fun√ß√£o especial que cria transi√ß√µes lineares entre cores. Defina o √¢ngulo e as cores desejadas."
    },
    {
        titulo: "Fase 9: A Flexibilidade C√≥smica",
        historia: "Espetacular! O planeta agora tem um c√©u colorido. Chegou a hora de aprender a organizar elementos de forma mais inteligente. Os antigos descobriram uma tecnologia chamada 'Flexbox' que permite controlar o layout como nunca antes.",
        desafio: "üéØ Desafio: Crie uma div com display: flex, justify-content: space-around e coloque 3 divs filhas dentro dela, cada uma com um texto diferente.",
        solucaoEsperada: ["display", "flex", "justify-content", "space-around"],
        dica: "O Flexbox √© uma ferramenta poderosa de layout. Primeiro, transforme o elemento pai em flex, depois use propriedades para controlar como os filhos se distribuem no espa√ßo dispon√≠vel."
    },
    {
        titulo: "Fase 10: O Responsive Nebula",
        historia: "Incr√≠vel! Os elementos agora dan√ßam em harmonia. Mas alguns habitantes acessam o portal atrav√©s de dispositivos menores. Voc√™ precisa tornar tudo responsivo, adapt√°vel a diferentes tamanhos de tela, como uma nebulosa que se adapta ao espa√ßo.",
        desafio: "üéØ Desafio: Adicione uma media query para telas menores que 768px que mude a dire√ß√£o do flex para column.",
        solucaoEsperada: ["@media", "max-width", "768px", "flex-direction", "column"],
        dica: "As media queries permitem aplicar estilos condicionais baseados no tamanho da tela. Use a regra especial que come√ßa com @ e defina uma largura m√°xima para ativar os estilos responsivos."
    },
    {
        titulo: "Fase 11: O JavaScript Awakens",
        historia: "Fant√°stico! Agora a interface se adapta a qualquer dispositivo. Mas os habitantes querem interatividade - eles querem que as coisas respondam ao toque, como m√°gica. √â hora de despertar o poder do JavaScript!",
        desafio: "üéØ Desafio: Crie um bot√£o que, ao ser clicado, exiba um alert com a mensagem 'Bem-vindos √† Era Interativa!'.",
        solucaoEsperada: ["button", "onclick", "alert", "Bem-vindos"],
        dica: "Para adicionar interatividade, voc√™ precisa de um bot√£o e um evento que responda ao clique. Use uma fun√ß√£o JavaScript simples que mostra uma janela de alerta para o usu√°rio."
    },
    {
        titulo: "Fase 12: O Manipulador de DOM",
        historia: "Sensacional! A primeira intera√ß√£o funcionou. Agora voc√™ precisa aprender a manipular elementos da p√°gina dinamicamente. O DOM (Document Object Model) √© como o mapa estelar da p√°gina - voc√™ pode modificar qualquer elemento.",
        desafio: "üéØ Desafio: Crie um bot√£o que, ao ser clicado, mude o texto de um par√°grafo usando getElementById e innerHTML.",
        solucaoEsperada: ["getElementById", "innerHTML", "function"],
        dica: "Para manipular elementos, primeiro voc√™ precisa 'encontr√°-los' na p√°gina usando seu ID, depois modificar seu conte√∫do interno. Crie uma fun√ß√£o que execute essas a√ß√µes quando o bot√£o for clicado."
    },
    {
        titulo: "Fase 13: Os Eventos Estelares",
        historia: "Excelente! Voc√™ dominou a manipula√ß√£o b√°sica. Agora deve aprender sobre diferentes tipos de eventos - como quando uma nave pousa (click), quando sensores detectam movimento (hover), ou quando dados s√£o inseridos (input).",
        desafio: "üéØ Desafio: Crie um input que, ao ser digitado (evento oninput), mostre o texto em tempo real em um par√°grafo.",
        solucaoEsperada: ["input", "oninput", "this.value"],
        dica: "Existem eventos que respondem √† digita√ß√£o em tempo real. Crie um campo de entrada e use um evento que capture cada tecla digitada. O valor atual do campo pode ser obtido com uma palavra-chave especial."
    },
    {
        titulo: "Fase 14: O Loop do Infinito",
        historia: "Impressionante! Os eventos est√£o funcionando perfeitamente. Agora voc√™ precisa aprender a automatizar tarefas repetitivas. Os antigos criaram estruturas de repeti√ß√£o para n√£o fazer o mesmo trabalho mil vezes.",
        desafio: "üéØ Desafio: Use JavaScript para criar uma lista numerada de 1 a 5 dinamicamente usando um loop for.",
        solucaoEsperada: ["for", "createElement", "appendChild", "textContent"],
        dica: "Para criar elementos repetitivos, use um loop de repeti√ß√£o combinado com fun√ß√µes JavaScript que criam novos elementos no DOM. Cada elemento criado deve ser adicionado √† p√°gina como filho de outro elemento."
    },
    {
        titulo: "Fase 15: As Condi√ß√µes do Espa√ßo-Tempo",
        historia: "Perfeito! A automa√ß√£o est√° funcionando. Mas nem sempre queremos que as coisas aconte√ßam da mesma forma. √Äs vezes precisamos tomar decis√µes baseadas em condi√ß√µes - como um piloto que escolhe a rota baseada nas condi√ß√µes do espa√ßo.",
        desafio: "üéØ Desafio: Crie uma fun√ß√£o que receba um n√∫mero e exiba 'Positivo', 'Negativo' ou 'Zero' usando if/else.",
        solucaoEsperada: ["function", "if", "else", "Positivo", "Negativo", "Zero"],
        dica: "As estruturas condicionais permitem que o programa tome decis√µes. Crie uma fun√ß√£o que teste se um n√∫mero √© maior, menor ou igual a zero, exibindo mensagens diferentes para cada situa√ß√£o."
    },
    {
        titulo: "Fase 16: O Array Dimensional",
        historia: "Magn√≠fico! As decis√µes est√£o sendo tomadas corretamente. Agora voc√™ descobriu estruturas de dados mais complexas - arrays s√£o como hangares que podem guardar m√∫ltiplas naves (dados) organizadamente.",
        desafio: "üéØ Desafio: Crie um array com nomes de planetas e use um loop para exibir cada um em uma lista HTML.",
        solucaoEsperada: ["array", "forEach", "push", "planetas"],
        dica: "Arrays s√£o cole√ß√µes de dados organizados em sequ√™ncia. Crie um array com v√°rios itens e use um m√©todo especial que percorre cada elemento automaticamente, criando elementos HTML para cada um."
    },
    {
        titulo: "Fase 17: O Objeto Qu√¢ntico",
        historia: "Espetacular! Os arrays est√£o organizados como uma frota espacial. Agora voc√™ deve aprender sobre objetos - estruturas mais complexas que podem guardar propriedades e m√©todos, como uma nave completa com todas suas caracter√≠sticas.",
        desafio: "üéØ Desafio: Crie um objeto 'nave' com propriedades nome, energia e um m√©todo 'voar()' que exiba uma mensagem.",
        solucaoEsperada: ["object", "propriedades", "metodo", "nave", "energia"],
        dica: "Objetos s√£o estruturas que combinam dados (propriedades) e a√ß√µes (m√©todos) em uma √∫nica entidade. Defina as caracter√≠sticas da nave e uma a√ß√£o que ela pode realizar."
    },
    {
        titulo: "Fase 18: A Anima√ß√£o Temporal",
        historia: "Incr√≠vel! Os objetos est√£o funcionando como naves completas. Agora voc√™ vai adicionar movimento e vida √†s suas cria√ß√µes. As anima√ß√µes CSS s√£o como dar alma aos elementos digitais.",
        desafio: "üéØ Desafio: Crie uma anima√ß√£o CSS que fa√ßa um elemento girar 360 graus continuamente.",
        solucaoEsperada: ["@keyframes", "animation", "rotate", "360deg", "infinite"],
        dica: "Para criar anima√ß√µes, defina primeiro os quadros-chave da anima√ß√£o (o que acontece do in√≠cio ao fim), depois aplique essa anima√ß√£o a um elemento. Use transforma√ß√µes de rota√ß√£o e configure para repetir infinitamente."
    },
    {
        titulo: "Fase 19: O Grid Gal√°ctico",
        historia: "Fant√°stico! Os elementos agora t√™m vida pr√≥pria. Para sua pen√∫ltima miss√£o, voc√™ deve dominar o CSS Grid - uma tecnologia que permite criar layouts complexos como uma grade de coordenadas gal√°cticas.",
        desafio: "üéØ Desafio: Crie um container com display: grid, defina 3 colunas e 2 linhas, e coloque 6 divs filhas dentro.",
        solucaoEsperada: ["display", "grid", "grid-template-columns", "grid-template-rows"],
        dica: "O CSS Grid cria layouts bidimensionais organizados em linhas e colunas. Transforme um elemento em grid, depois defina a estrutura das colunas e linhas que deseja criar."
    },
    {
        titulo: "Fase 20: O Grande Final C√≥smico",
        historia: "PARAB√âNS, Desenvolvedor C√≥smico! Voc√™ chegou √† miss√£o final. Agora deve criar uma p√°gina completa que combine todos os conhecimentos adquiridos - HTML sem√¢ntico, CSS avan√ßado, JavaScript interativo e design responsivo. Esta ser√° sua obra-prima c√≥smica!",
        desafio: "üéØ DESAFIO FINAL: Crie uma p√°gina completa com cabe√ßalho, navega√ß√£o, se√ß√£o principal com flex/grid, cards interativos, anima√ß√µes e responsividade. Mostre todo seu poder de Desenvolvedor C√≥smico!",
        solucaoEsperada: ["header", "nav", "main", "section", "flex", "grid", "responsive", "interactive"],
        dica: "Combine tudo que aprendeu: HTML sem√¢ntico + CSS moderno + JavaScript interativo!"
    }
];

function atualizarInterface() {
    const fase = fases[faseAtual - 1];
    document.getElementById('currentPhase').textContent = faseAtual;
    document.getElementById('phaseTitle').textContent = fase.titulo;
    document.getElementById('storyText').textContent = fase.historia;
    document.getElementById('challengeText').innerHTML = fase.desafio;
    
    const progresso = (faseAtual / totalFases) * 100;
    document.getElementById('progressFill').style.width = progresso + '%';
    
    document.getElementById('nextBtn').classList.remove('enabled');
    document.getElementById('codeEditor').value = '';
    document.getElementById('previewFrame').innerHTML = '';
}

function executarCodigo() {
    const codigo = document.getElementById('codeEditor').value;
    const previewFrame = document.getElementById('previewFrame');
    
    try {
        // Verifica se √© HTML completo ou apenas conte√∫do
        if (codigo.includes('<!DOCTYPE') || codigo.includes('<html')) {
            previewFrame.innerHTML = codigo;
        } else if (codigo.includes('<script>') || codigo.includes('<style>')) {
            const htmlCompleto = `
                <!DOCTYPE html>
                <html>
                <head><meta charset="UTF-8"></head>
                <body>
                    ${codigo}
                </body>
                </html>
            `;
            previewFrame.srcdoc = htmlCompleto;
        } else {
            previewFrame.innerHTML = codigo;
        }
        
        // Verifica se a solu√ß√£o est√° correta
        verificarSolucao(codigo);
        
    } catch (error) {
        mostrarFeedback('Erro no c√≥digo! Verifique a sintaxe.', 'error');
    }
}

function verificarSolucao(codigo) {
    const fase = fases[faseAtual - 1];
    const solucao = fase.solucaoEsperada;
    let acertos = 0;
    
    solucao.forEach(elemento => {
        if (codigo.toLowerCase().includes(elemento.toLowerCase())) {
            acertos++;
        }
    });
    
    const porcentagemAcerto = (acertos / solucao.length) * 100;
    
    if (porcentagemAcerto >= 70) {
        mostrarFeedback('üéâ Excelente trabalho, Desenvolvedor C√≥smico! Miss√£o cumprida!', 'success');
        document.getElementById('nextBtn').classList.add('enabled');
        criarParticulas();
    } else {
        mostrarFeedback(`üöÄ Continue tentando! Voc√™ est√° no caminho certo. ${fase.dica}`, 'error');
    }
}

function mostrarFeedback(mensagem, tipo) {
    const feedback = document.getElementById('feedback');
    feedback.textContent = mensagem;
    feedback.className = `feedback ${tipo} show`;
    
    setTimeout(() => {
        feedback.classList.remove('show');
    }, 3000);
}

function criarParticulas() {
    const container = document.getElementById('particles');
    
    for (let i = 0; i < 20; i++) {
        const particle = document.createElement('div');
        particle.className = 'particle';
        particle.style.left = Math.random() * 100 + 'vw';
        particle.style.top = Math.random() * 100 + 'vh';
        particle.style.backgroundColor = `hsl(${Math.random() * 360}, 70%, 60%)`;
        container.appendChild(particle);
        
        setTimeout(() => {
            particle.remove();
        }, 3000);
    }
}

function proximaFase() {
    if (faseAtual < totalFases) {
        faseAtual++;
        atualizarInterface();
        mostrarFeedback('üåü Nova miss√£o desbloqueada! Prepare-se para o pr√≥ximo desafio!', 'success');
    } else {
        mostrarFeedback('üèÜ PARAB√âNS! Voc√™ completou todas as miss√µes e se tornou um Mestre Desenvolvedor C√≥smico!', 'success');
        criarFogosArtificio();
    }
}

function criarFogosArtificio() {
    const container = document.getElementById('particles');
    
    for (let i = 0; i < 50; i++) {
        const particle = document.createElement('div');
        particle.className = 'particle';
        particle.style.left = '50vw';
        particle.style.top = '50vh';
        particle.style.backgroundColor = `hsl(${Math.random() * 360}, 100%, 60%)`;
        particle.style.width = '8px';
        particle.style.height = '8px';
        
        const angle = (Math.PI * 2 * i) / 50;
        const velocity = 200 + Math.random() * 100;
        const x = Math.cos(angle) * velocity;
        const y = Math.sin(angle) * velocity;
        
        particle.style.animation = `particleExplode 2s ease-out forwards`;
        particle.style.transform = `translate(${x}px, ${y}px)`;
        
        container.appendChild(particle);
        
        setTimeout(() => {
            particle.remove();
        }, 2000);
    }
}

// Fun√ß√£o para dar dicas contextuais
function obterDica() {
    const fase = fases[faseAtual - 1];
    mostrarFeedback(`üí° Dica: ${fase.dica}`, 'success');
}

// Fun√ß√£o para resetar a fase atual
function resetarFase() {
    document.getElementById('codeEditor').value = '';
    document.getElementById('previewFrame').innerHTML = '';
    document.getElementById('nextBtn').classList.remove('enabled');
    mostrarFeedback('üîÑ Fase resetada! Comece novamente.', 'success');
}

// Eventos de teclado para melhorar a experi√™ncia
document.getElementById('codeEditor').addEventListener('keydown', function(e) {
    // Atalho Ctrl+Enter para executar c√≥digo
    if (e.ctrlKey && e.key === 'Enter') {
        executarCodigo();
    }
    
    // Auto-indenta√ß√£o b√°sica
    if (e.key === 'Enter') {
        const textarea = e.target;
        const cursorPos = textarea.selectionStart;
        const textBeforeCursor = textarea.value.substring(0, cursorPos);
        const lastLine = textBeforeCursor.split('\n').pop();
        const indentation = lastLine.match(/^\s*/)[0];
        
        // Adiciona indenta√ß√£o extra para tags que abrem
        if (lastLine.includes('<') && !lastLine.includes('</') && lastLine.includes('>')) {
            setTimeout(() => {
                const newCursorPos = textarea.selectionStart;
                const newValue = textarea.value.substring(0, newCursorPos) + 
                                '  ' + indentation + 
                                textarea.value.substring(newCursorPos);
                textarea.value = newValue;
                textarea.setSelectionRange(newCursorPos + 2, newCursorPos + 2);
            }, 0);
        }
    }
});

// Fun√ß√£o para salvar progresso no localStorage (simulado com vari√°vel)
let progressoSalvo = {
    faseAtual: 1,
    dataUltimoAcesso: new Date().toISOString()
};

function salvarProgresso() {
    progressoSalvo.faseAtual = faseAtual;
    progressoSalvo.dataUltimoAcesso = new Date().toISOString();
}

function carregarProgresso() {
    if (progressoSalvo.faseAtual > 1) {
        const continuar = confirm(`Voc√™ havia chegado at√© a fase ${progressoSalvo.faseAtual}. Deseja continuar de onde parou?`);
        if (continuar) {
            faseAtual = progressoSalvo.faseAtual;
            atualizarInterface();
        }
    }
}

// Adiciona estilos CSS para anima√ß√µes extras
const estilosExtras = `
    @keyframes particleExplode {
        0% {
            opacity: 1;
            transform: translate(0, 0) scale(1);
        }
        100% {
            opacity: 0;
            transform: translate(var(--x, 0), var(--y, 0)) scale(0);
        }
    }
    
    .code-editor::-webkit-scrollbar {
        width: 8px;
    }
    
    .code-editor::-webkit-scrollbar-track {
        background: rgba(255,255,255,0.1);
        border-radius: 4px;
    }
    
    .code-editor::-webkit-scrollbar-thumb {
        background: rgba(0,245,255,0.5);
        border-radius: 4px;
    }
    
    .code-editor::-webkit-scrollbar-thumb:hover {
        background: rgba(0,245,255,0.8);
    }
    
    .story-section:hover, .code-section:hover, .preview-section:hover {
        transform: translateY(-2px);
        box-shadow: 0 12px 40px rgba(0,0,0,0.15);
        transition: all 0.3s ease;
    }
    
    .phase-title {
        background: linear-gradient(45deg, #00f5ff, #00d4ff);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }
    
    .btn:active {
        transform: translateY(1px) scale(0.98);
    }
    
    @keyframes pulseGlow {
        0%, 100% { box-shadow: 0 0 20px rgba(0,245,255,0.3); }
        50% { box-shadow: 0 0 30px rgba(0,245,255,0.6); }
    }
    
    .btn-next.enabled {
        animation: pulseGlow 2s infinite;
    }
`;

const styleSheet = document.createElement('style');
styleSheet.textContent = estilosExtras;
document.head.appendChild(styleSheet);

// Inicializa√ß√£o do jogo
document.addEventListener('DOMContentLoaded', function() {
    atualizarInterface();
    carregarProgresso();
    
    // Adiciona event listeners para salvar progresso
    window.addEventListener('beforeunload', salvarProgresso);
    
    // Mensagem de boas-vindas
    setTimeout(() => {
        mostrarFeedback('üöÄ Bem-vindo, Desenvolvedor C√≥smico! Sua jornada √©pica come√ßa agora!', 'success');
    }, 1000);
});

// Sistema de conquistas (simulado)
const conquistas = {
    primeiroAcerto: false,
    cincoPhasesCompletas: false,
    dezPhasesCompletas: false,
    mest—Ä–µC√≥smico: false
};

function verificarConquistas() {
    if (faseAtual === 2 && !conquistas.primeiroAcerto) {
        conquistas.primeiroAcerto = true;
        mostrarFeedback('üèÖ Conquista Desbloqueada: Primeiro Passo C√≥smico!', 'success');
    }
    
    if (faseAtual === 6 && !conquistas.cincoPhasesCompletas) {
        conquistas.cincoPhasesCompletas = true;
        mostrarFeedback('üèÖ Conquista Desbloqueada: Explorador Estelar!', 'success');
    }
    
    if (faseAtual === 11 && !conquistas.dezPhasesCompletas) {
        conquistas.dezPhasesCompletas = true;
        mostrarFeedback('üèÖ Conquista Desbloqueada: Navegador Gal√°ctico!', 'success');
    }
    
    if (faseAtual === 21 && !conquistas.mestreCosmico) {
        conquistas.mestreCosmico = true;
        mostrarFeedback('üëë CONQUISTA √âPICA: Mestre Desenvolvedor C√≥smico!', 'success');
    }
}

// Atualiza a fun√ß√£o proximaFase para incluir conquistas
const proximaFaseOriginal = proximaFase;
proximaFase = function() {
    proximaFaseOriginal();
    verificarConquistas();
};

// Adiciona bot√µes de ajuda
function adicionarBotoesAjuda() {
    const buttonsDiv = document.querySelector('.buttons');
    
    const btnDica = document.createElement('button');
    btnDica.className = 'btn';
    btnDica.style.background = 'linear-gradient(45deg, #fbbf24, #f59e0b)';
    btnDica.style.color = '#000';
    btnDica.textContent = 'üí° Dica';
    btnDica.onclick = obterDica;
    
    const btnReset = document.createElement('button');
    btnReset.className = 'btn';
    btnReset.style.background = 'linear-gradient(45deg, #ef4444, #dc2626)';
    btnReset.style.color = '#fff';
    btnReset.textContent = 'üîÑ Resetar';
    btnReset.onclick = resetarFase;
    
    buttonsDiv.appendChild(btnDica);
    buttonsDiv.appendChild(btnReset);
}

// Executa ap√≥s DOM carregar
document.addEventListener('DOMContentLoaded', function() {
    adicionarBotoesAjuda();
});
